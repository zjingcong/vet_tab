#!/usr/bin/env python

import os
import argparse


def load_temp(templatefile):
    with open(templatefile, 'r') as template_file:
        template = template_file.read()
    return template


def generate(parms, template, file_name):
    scene = template.format(**parms)
    with open(file_name, 'w') as scene_file:
        scene_file.write('# This scene is automatically generated by generator.\n')
        scene_file.write(scene)
    # chmod
    os.system("chmod 777 {}".format(scene_filename))


def get_args():
    parser = argparse.ArgumentParser(description="Take scene generation parms.")

    parser.add_argument('-stemp', type=str, dest='stemp', default='scenes/temp/vet_tab_test_temp.pbrt', help='Input scene template file path.')
    parser.add_argument('-spath', type=str, dest='spath', default='scenes/scenes/vet_tab_test_default.pbrt', help='Input scene output file path.')

    # parms in scene file
    parser.add_argument('-eyex', type=float, dest='eyex', default=0.0, help='Input camera eye location x.')
    parser.add_argument('-eyey', type=float, dest='eyey', default=12.0, help='Input camera eye location y.')
    parser.add_argument('-eyez', type=float, dest='eyez', default=8.0, help='Input camera eye location z.')
    parser.add_argument('-transx', type=float, dest='transx', default=0.0, help='Input tab x direction translation.')
    parser.add_argument('-transy', type=float, dest='transy', default=0.0, help='Input tab y direction translation.')
    parser.add_argument('-transz', type=float, dest='transz', default=0.0, help='Input tab z direction translation.')
    parser.add_argument('-rot', type=float, dest='rot', default=0.0, help='Input tab rotation along y axis.')
    parser.add_argument('-output', type=str, dest='output', default='../output/vet_tab_defaulttest.png', help='Input renderer output.')

    args = parser.parse_args();
    return args


if __name__ == '__main__':
    args = get_args()
    scene_template = args.stemp
    scene_filename = args.spath
    parms = dict(eye_x=args.eyex,
                 eye_y=args.eyey,
                 eye_z=args.eyez,
                 trans_x=args.transx,
                 trans_y=args.transy,
                 trans_z=args.transz,
                 rot=args.rot,
                 out=args.output)

    # load template
    template = load_temp(scene_template)
    # fill template
    generate(parms, template, scene_filename)
    print "Generate {} success.".format(scene_filename)
